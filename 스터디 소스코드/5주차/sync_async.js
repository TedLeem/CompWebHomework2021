/*
동기와 비동기 (매우 매우 중요한 개념)

그 동안은 동기적으로 프로그램을 만듦

하지만 네트워크 통신과 같은 것들은 비동기적으로 만들어야 함.

비동기란 기존에 위에서 아래로 실행되는 흐름에서 벗어나서 별도로 실행을 시키고 실행할 준비가 되면 실행되는 방식


예를 들어 빨래를 돌리고, 빨래를 널고, 설거지를 해야한다고 가정하자

이때 빨래를 돌리는 동안 빨래가 다 세탁될 때까지 기다리고 있는 것은 매우 비효율적!

빨래를 돌려놓고 빨래가 되는 동안 설거지 하는 것이 더 효율적이고 이것이 바로 비동기적인 방식이다!

비동기 프로그래밍을 위해 Promise, async, await 등이 있다. (나중에 알아보자. 궁금하면 직접 공부해보는 것도 추천!)
*/


// 예시
//참고로 setTimeout은 대표적인 비동기 함수로, 인자로 입력한 함수(콜백 함수)를, 지정한 시간이 지나고 실행하도록 하는 함수
//이때 시간은 ms 단위다. 즉 1000ms = 1초
setTimeout(() => {
    console.log("빨래 돌리기")      //빨래 돌리기 5초 소요
}, 5000)

setTimeout(() => {
    console.log("빨래 널기")        //빨래 널기 4초 소요
}, 4000)

setTimeout(() => {
    console.log("설거지 하기")      //설거지 2초 소요
}, 2000)

//이런 식으로 동작시키면 동기적으로 수행할 경우 11초가 걸리는 일을 5초만에 모두 수행 가능.



//하지만 위를 실행시키면 빨래 널기가 빨래 돌리기보다 먼저 끝남. 말이 안되는 상황.
//이렇게 비동기적인 수행에도 순서대로 수행될 필요가 있을 때는 아래처럼 함수 안에 또 비동기 함수를 넣는 방식을 사용함.
setTimeout(() => {
    console.log("빨래 돌리기")      //빨래 돌리기 5초 소요
    setTimeout(() => {
        console.log("빨래 널기")    //빨래 널기 4초 소요
    }, 4000)
}, 5000)

setTimeout(() => {
    console.log("설거지 하기")      //설거지 2초 소요
}, 2000)


//하지만 이게 만약 계속해서 이어진다면 매우 가독성이 떨어지고 헷갈림. -> 콜백지옥
setTimeout(() => {
    console.log("빨래 돌리기")
    setTimeout(() => {
        console.log("빨래 널기")
        setTimeout(() => {
            console.log("빨래 널기")
            setTimeout(() => {
                console.log("빨래 널기")
                setTimeout(() => {
                    console.log("빨래 널기")
                    setTimeout(() => {
                        console.log("빨래 널기")
                        setTimeout(() => {
                            console.log("빨래 널기")
                            setTimeout(() => {
                                console.log("빨래 널기")
                                setTimeout(() => {
                                    console.log("빨래 널기")
                                }, 4000)
                            }, 4000)
                        }, 4000)
                    }, 4000)
                }, 4000)
            }, 4000)
        }, 4000)
    }, 4000)
}, 5000)

//이런 문제점을 해결하기 위해 Promise와 async, await이 있다!
